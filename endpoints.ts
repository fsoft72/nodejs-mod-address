/* This file has been generated by flow2code
* See: https://flow.liwe.org
*/

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	// endpoints function
	delete_address_admin_del, get_address_admin_list, get_address_details, get_address_list, patch_address_admin_fields,
	patch_address_admin_update, post_address_admin_add,
	// functions
	address_add, address_db_init, address_user_list,
} from './methods';

import {
	Address, AddressKeys,
} from './types';

/*=== f2c_start __header ===*/

/*=== f2c_end __header ===*/

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - address " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "address", l ) );
	address_db_init ( liwe );

	app.post ( '/api/address/admin/add', perms( [ "address.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { address, nr, type, name, city, zip, state, country, id_user, company_name, fiscal_code, vat_number, sdi, pec, ___errors } = typed_dict( req.body, [
			{ name: "address", type: "string", required: true },
			{ name: "nr", type: "string", required: true },
			{ name: "type", type: "string", required: true },
			{ name: "name", type: "string" },
			{ name: "city", type: "string" },
			{ name: "zip", type: "string" },
			{ name: "state", type: "string" },
			{ name: "country", type: "string" },
			{ name: "id_user", type: "string" },
			{ name: "company_name", type: "string" },
			{ name: "fiscal_code", type: "string" },
			{ name: "vat_number", type: "string" },
			{ name: "sdi", type: "string" },
			{ name: "pec", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_address_admin_add ( req, address, nr, type, name, city, zip, state, country, id_user, company_name, fiscal_code, vat_number, sdi, pec, ( err: ILError, addr: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addr } );
		} );
	} );

	app.patch ( '/api/address/admin/update', perms( [ "address.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, name, address, nr, type, city, zip, state, country, id_user, company_name, fiscal_code, vat_number, sdi, pec, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "name", type: "string" },
			{ name: "address", type: "string" },
			{ name: "nr", type: "string" },
			{ name: "type", type: "string" },
			{ name: "city", type: "string" },
			{ name: "zip", type: "string" },
			{ name: "state", type: "string" },
			{ name: "country", type: "string" },
			{ name: "id_user", type: "string" },
			{ name: "company_name", type: "string" },
			{ name: "fiscal_code", type: "string" },
			{ name: "vat_number", type: "string" },
			{ name: "sdi", type: "string" },
			{ name: "pec", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_address_admin_update ( req, id, name, address, nr, type, city, zip, state, country, id_user, company_name, fiscal_code, vat_number, sdi, pec, ( err: ILError, addr: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addr } );
		} );
	} );

	app.patch ( '/api/address/admin/fields', perms( [ "address.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, data, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "data", type: "any", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_address_admin_fields ( req, id, data, ( err: ILError, addr: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addr } );
		} );
	} );

	app.get ( '/api/address/admin/list', perms( [ "address.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_user, rows, skip, ___errors } = typed_dict( req.query as any, [
			{ name: "id_user", type: "string" },
			{ name: "rows", type: "number" },
			{ name: "skip", type: "number" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_address_admin_list ( req, id_user, rows, skip, ( err: ILError, addrs: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addrs } );
		} );
	} );

	app.delete ( '/api/address/admin/del', perms( [ "address.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_address_admin_del ( req, id, ( err: ILError, id: string ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { id } );
		} );
	} );

	app.get ( '/api/address/details', ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.query as any, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_address_details ( req, id, ( err: ILError, addr: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addr } );
		} );
	} );

	app.get ( '/api/address/list', ( req: ILRequest, res: ILResponse ) => {
		const { rows, skip, ___errors } = typed_dict( req.query as any, [
			{ name: "rows", type: "number" },
			{ name: "skip", type: "number" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_address_list ( req, rows, skip, ( err: ILError, addrs: Address ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { addrs } );
		} );
	} );

};
